#!/usr/bin/env bash
usage() {
  echo "Usage:"
  echo "    cg-cli [-h] [--help] +[--gen]"
  echo "    cg-cli sanity"
  echo "    cg-cli show tables"
  echo "    cg-cli show create table <table-name>"
  echo "    cg-cli crud one      <master>"
  echo "    cg-cli crud onemany  <master> <slave:mid> [...]"
  echo "    cg-cli crud manymany <master> <peer> <relation>"
  echo "    cg-cli crud group    <group> [groupBy]"
  echo "    cg-cli initialize <table> [...]"
  echo "    cg-cli test init"
  echo "    cg-cli test run sql"
  echo "    cg-cli test crud one"
  echo "    cg-cli test crud onemany"
  echo "    cg-cli test crud manymany"
  echo "    cg-cli test crud group"
}

cmd=$1
gen='-'
if [ ! $cmd ];then
   usage
   exit
fi
for p in $@;do
   if [ "$p"x == "-h"x -o "$p"x == "--help"x ];then
      usage
      exit
   fi

   ## get check
   if [ "$p"x == "--gen"x ];then
      gen='--gen'
   fi
done

if [ "$cmd"x == "sanity"x ];then
   echo 'ok' > /dev/null

elif [ "$cmd"x == "show"x ];then
   if [ "$2"x == "tables"x ];then
      cmd=showtables

   elif [ "$2"x == "create"x -a "$3"x == "table"x ];then

      ## check usage
      if [ ! $4 ];then
         usage
         exit
      fi 
      ## end

      cmd=showcreatetable
   else
       usage
       exit
   fi

elif [ "$cmd"x == "crud"x ];then
   if [ "$2"x == "one"x ];then
      
      ## check usage
      if [ ! $3 ];then
         usage
         exit
      fi 
      ## end

      cmd=crudone

   elif [ "$2"x == "onemany"x ];then
      # $3-master; $4-slave:mid
     
      ## check usage
      if [ ! $4 ];then
         usage
         exit
      fi 
      ## end

      cmd=crudonemany

   elif [ "$2"x == "manymany"x ];then
       # $3-master; $4-peer, $5-relation

      ## check usage
      if [ ! $5 ];then
         usage
         exit
      fi 
      ## end

      cmd=crudmanymany
   
   elif [ "$2"x == "group"x ];then
       # $3-group; $4-groupBy

      ## check usage
      if [ ! $4 ];then
         usage
         exit
      fi 
      ## end

      cmd=crudgroup
   fi

elif [ "$cmd"x == "initialize"x ];then
   if [ ! $2 ];then
      usage
      exit
   fi
elif [ "$cmd"x == "test"x ];then
   if [ "$2"x == "init"x ];then
       cmd=testinit
   elif [ "$2"x == "run"x ];then 
      if [ ! $3 ];then
         usage
         exit
      fi
      cmd=testrunsql
   elif [  "$2"x == "crud"x ];then 
       if [ "$3"x == "one"x ];then
           cmd=testcrudone
       elif [ "$3"x == "onemany"x ];then
           cmd=testcrudonemany
       elif [ "$3"x == "manymany"x ];then
           cmd=testcrudmanymany
       elif [ "$3"x == "group"x ];then
           cmd=testcrudgroup
       else
         usage
         exit
       fi
   else
      usage
      exit
   fi
else
    usage
    exit
fi


### start ###

dir=$(dirname $0)

POM=code-generator-pom.xml
pom=$dir/gen/$POM
if [ ! -e $pom ];then
   if [ ! -d $dir/gen ];then
       mkdir $dir/gen
   fi
   cp $dir/$POM $pom
fi

## get connection string
url=$(grep "<url>" $pom)
url=${url%</url>}
url=${url#*<url>}
url=${url//amp;/}
#echo $url

match_database(){
   #cut after ?
   db=$url
   db=${db##*/}
   db=${db%%[\?]*}
   echo $db
}

## sanity test for mysql
sanity() {
   mysql_test=$($dir/mysql-test/bin/mysql-test $url "select now()")
   if [ "$mysql_test" ];then
      echo "Connection to $url succeeded!"
   else
      exit
   fi
}

showtables() {
    db=$(match_database)
    sql="select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA='$db' and TABLE_NAME <> 'schema_version'"
    for t in $($dir/mysql-test/bin/mysql-test "$url" "$sql");do
        echo $t
    done
}

showcreatetable() {
    table=$1
    sql="show create table $table"
    result=$($dir/mysql-test/bin/mysql-test "$url" "$sql")
    #result="'tenant'|'CREATE TABLE \`tenant\` ( \`id\` bigint(20) NOT NULL, \`status\` int(11) DEFAULT NULL, \`name\` varchar(255) DEFAULT NULL, \`delete_flag\` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (\`id\`)) ENGINE=InnoDB DEFAULT CHARSET=utf8'"

    result=${result#*[|]}
    result=${result#*[\']}
    result=${result%[\']*}
    result=${result//,/,!}

    #result=${result#*[(]}
    #result=${result%[)]*}
    #arr=(${result//,/})
    #arr=($(echo "$result" | tr ',' '\n'))
    
    echo $result | tr '!' '\n'
}

initialize() {
   mvn -Dinit=true com.jfeat:sb-code-generator:1.3.0:generate -f $pom
}

testinit(){
   if [ ! -d src/main/resources/sql ];then
       mkdir -p src/main/resources/sql
   fi
   if [ ! -e src/main/resources/sql/cg-mysql-schema.sql ];then
       cp assets/sql/cg-mysql-schema.sql src/main/resources/sql
   fi
}

testrunsql(){
    for sql in $(ls src/main/resources/sql/*.sql);do
       echo $sql
       $dir/mysql-test/bin/mysql-test $url $sql
    done
}

gen() {
   if [ "$gen"x == "--gen"x ];then
      mvn com.jfeat:sb-code-generator:1.3.0:generate -f $pom
   fi
}

testcrudone(){
   
}


### main ##

if [ "$cmd"x == "sanity"x ];then
   sanity

elif [ "$cmd"x == "showtables"x ];then
   showtables

elif [ "$cmd"x == "showcreatetable"x ];then
   tab=$4
   showcreatetable $tab

elif [ "$cmd"x == "crudone"x ];then
   master=$3
 
   # config table
   $dir/conf-cli table reset --save
   $dir/conf-cli table add $master --save
   # config crud
   $dir/conf-cli crud reset --save
   $dir/conf-cli crud add one $master --save
   # config end

   $dir/conf-cli list -t -c
   ## gen crud
   gen

elif [ "$cmd"x == "crudonemany"x ];then
   master=$3; 
   
   shift; ## shift cmd
   shift; ## shift onemany
   shift; ## shift master

   # config table
   $dir/conf-cli table reset --save
   $dir/conf-cli table add $master $@ --save

   # config crud
   $dir/conf-cli crud reset --save
   $dir/conf-cli crud add onemany $master $@ --save
   # config end

   $dir/conf-cli list -t -c
   ## gen crud
   gen

 elif [ "$cmd"x == "crudmanymany"x ];then
   master=$3; 
   peer=$4; 
   relation=$5

   # config table
   $dir/conf-cli table reset --save
   $dir/conf-cli table add $master $peer --save
   # config crud
   $dir/conf-cli crud reset --save
   $dir/conf-cli crud add manymany $master $peer $relation --save
   # config end
   
   # show the result [-t - show tables] and  [-c - show cruds]
   $dir/conf-cli list -t -c

   ## gen crud
   gen

elif [ "$cmd"x == "crudgroup"x ];then
   group=$3;
   groupBy=$4;

   # config table
   $dir/conf-cli table reset --save
   $dir/conf-cli table add $group $groupBy --save
   # config crud
   $dir/conf-cli crud reset --save
   $dir/conf-cli crud add group $group $groupBy --save
   # config end

   $dir/conf-cli list -t -c
   ## gen crud
   gen

elif [ "$cmd"x == "initialize"x ];then
   # config tables
   $dir/conf-cli table reset --save
   $dir/conf-cli table add $@ --save

   # gen persistance
   initialize
elif [ "$cmd"x == "testinit"x ];then

   ## mkdir -p src/main/resources/sql
   testinit

   ## check result
   schema='src/main/resources/sql/cg-mysql-schema.sql'
   if [ ! -e $schema ];then
       echo "Create $schema has been failed !"
       exit
   else 
       ls $schema
   fi

elif [ "$cmd"x == "testrunsql"x ];then
    testrunsql

else
    usage
    exit
fi
